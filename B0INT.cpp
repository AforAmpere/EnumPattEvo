#include "arrayfuncs.h"

const int trans_lookup[1024] = {
0, 1, 2, 6, 1, 3, 6, 13, 2, 6, 4, 12, 5, 14, 17, 22,
51, 52, 53, 57, 52, 54, 57, 64, 53, 57, 55, 63, 56, 65, 68, 73,
2, 5, 4, 17, 6, 14, 12, 22, 7, 18, 10, 28, 18, 23, 28, 36,
53, 56, 55, 68, 57, 65, 63, 73, 58, 69, 61, 79, 69, 74, 79, 87, 
1, 3, 5, 14, 8, 9, 16, 24, 6, 13, 17, 22, 16, 24, 30, 35, 
52, 54, 56, 65, 59, 60, 67, 75, 57, 64, 68, 73, 67, 75, 81, 86, 
5, 15, 11, 21, 16, 25, 26, 40, 18, 29, 27, 37, 31, 41, 39, 45, 
56, 66, 62, 72, 67, 76, 77, 91, 69, 80, 78, 88, 82, 92, 90, 96, 
2, 5, 7, 18, 5, 15, 18, 29, 4, 17, 10, 28, 11, 21, 27, 37, 
53, 56, 58, 69, 56, 66, 69, 80, 55, 68, 61, 79, 62, 72, 78, 88, 
4, 11, 10, 27, 17, 21, 28, 37, 10, 27, 20, 32, 27, 38, 32, 42, 
55, 62, 61, 78, 68, 72, 79, 88, 61, 78, 71, 83, 78, 89, 83, 93, 
6, 14, 18, 23, 16, 25, 31, 41, 12, 22, 28, 36, 26, 40, 39, 45, 
57, 65, 69, 74, 67, 76, 82, 92, 63, 73, 79, 87, 77, 91, 90, 96, 
17, 21, 27, 38, 30, 34, 39, 44, 28, 37, 32, 42, 39, 44, 47, 48, 
68, 72, 78, 89, 81, 85, 90, 95, 79, 88, 83, 93, 90, 95, 98, 99, 
1, 8, 5, 16, 3, 9, 14, 24, 5, 16, 11, 26, 15, 25, 21, 40, 
52, 59, 56, 67, 54, 60, 65, 75, 56, 67, 62, 77, 66, 76, 72, 91, 
6, 16, 17, 30, 13, 24, 22, 35, 18, 31, 27, 39, 29, 41, 37, 45, 
57, 67, 68, 81, 64, 75, 73, 86, 69, 82, 78, 90, 80, 92, 88, 96, 
3, 9, 15, 25, 9, 19, 25, 33, 14, 24, 21, 40, 25, 33, 34, 43, 
54, 60, 66, 76, 60, 70, 76, 84, 65, 75, 72, 91, 76, 84, 85, 94, 
14, 25, 21, 34, 24, 33, 40, 43, 23, 41, 38, 44, 41, 46, 44, 49, 
65, 76, 72, 85, 75, 84, 91, 94, 74, 92, 89, 95, 92, 97, 95, 100, 
6, 16, 18, 31, 14, 25, 23, 41, 17, 30, 27, 39, 21, 34, 38, 44, 
57, 67, 69, 82, 65, 76, 74, 92, 68, 81, 78, 90, 72, 85, 89, 95, 
12, 26, 28, 39, 22, 40, 36, 45, 28, 39, 32, 47, 37, 44, 42, 48, 
63, 77, 79, 90, 73, 91, 87, 96, 79, 90, 83, 98, 88, 95, 93, 99, 
13, 24, 29, 41, 24, 33, 41, 46, 22, 35, 37, 45, 40, 43, 44, 49, 
64, 75, 80, 92, 75, 84, 92, 97, 73, 86, 88, 96, 91, 94, 95, 100, 
22, 40, 37, 44, 35, 43, 45, 49, 36, 45, 42, 48, 45, 49, 48, 50, 
73, 91, 88, 95, 86, 94, 96, 100, 87, 96, 93, 99, 96, 100, 99, 101,
102, 103, 104, 108, 103, 105, 108, 115, 104, 108, 106, 114, 107, 
116, 119, 124, 153, 154, 155, 159, 154, 156, 159, 166, 155, 159, 
157, 165, 158, 167, 170, 175, 104, 107, 106, 119, 108, 116, 114, 
124, 109, 120, 112, 130, 120, 125, 130, 138, 155, 158, 157, 170, 
159, 167, 165, 175, 160, 171, 163, 181, 171, 176, 181, 189, 103, 
105, 107, 116, 110, 111, 118, 126, 108, 115, 119, 124, 118, 126, 
132, 137, 154, 156, 158, 167, 161, 162, 169, 177, 159, 166, 170, 
175, 169, 177, 183, 188, 107, 117, 113, 123, 118, 127, 128, 142, 
120, 131, 129, 139, 133, 143, 141, 147, 158, 168, 164, 174, 169, 
178, 179, 193, 171, 182, 180, 190, 184, 194, 192, 198, 104, 107, 
109, 120, 107, 117, 120, 131, 106, 119, 112, 130, 113, 123, 129, 
139, 155, 158, 160, 171, 158, 168, 171, 182, 157, 170, 163, 181, 
164, 174, 180, 190, 106, 113, 112, 129, 119, 123, 130, 139, 112, 
129, 122, 134, 129, 140, 134, 144, 157, 164, 163, 180, 170, 174, 
181, 190, 163, 180, 173, 185, 180, 191, 185, 195, 108, 116, 120, 
125, 118, 127, 133, 143, 114, 124, 130, 138, 128, 142, 141, 147, 
159, 167, 171, 176, 169, 178, 184, 194, 165, 175, 181, 189, 179, 
193, 192, 198, 119, 123, 129, 140, 132, 136, 141, 146, 130, 139, 
134, 144, 141, 146, 149, 150, 170, 174, 180, 191, 183, 187, 192, 
197, 181, 190, 185, 195, 192, 197, 200, 201, 103, 110, 107, 118, 
105, 111, 116, 126, 107, 118, 113, 128, 117, 127, 123, 142, 154, 
161, 158, 169, 156, 162, 167, 177, 158, 169, 164, 179, 168, 178, 
174, 193, 108, 118, 119, 132, 115, 126, 124, 137, 120, 133, 129, 
141, 131, 143, 139, 147, 159, 169, 170, 183, 166, 177, 175, 188, 
171, 184, 180, 192, 182, 194, 190, 198, 105, 111, 117, 127, 111, 
121, 127, 135, 116, 126, 123, 142, 127, 135, 136, 145, 156, 162, 
168, 178, 162, 172, 178, 186, 167, 177, 174, 193, 178, 186, 187, 
196, 116, 127, 123, 136, 126, 135, 142, 145, 125, 143, 140, 146, 
143, 148, 146, 151, 167, 178, 174, 187, 177, 186, 193, 196, 176, 
194, 191, 197, 194, 199, 197, 202, 108, 118, 120, 133, 116, 127, 
125, 143, 119, 132, 129, 141, 123, 136, 140, 146, 159, 169, 171, 
184, 167, 178, 176, 194, 170, 183, 180, 192, 174, 187, 191, 197, 
114, 128, 130, 141, 124, 142, 138, 147, 130, 141, 134, 149, 139, 
146, 144, 150, 165, 179, 181, 192, 175, 193, 189, 198, 181, 192, 
185, 200, 190, 197, 195, 201, 115, 126, 131, 143, 126, 135, 143, 
148, 124, 137, 139, 147, 142, 145, 146, 151, 166, 177, 182, 194, 
177, 186, 194, 199, 175, 188, 190, 198, 193, 196, 197, 202, 124, 
142, 139, 146, 137, 145, 147, 151, 138, 147, 144, 150, 147, 151, 
150, 152, 175, 193, 190, 197, 188, 196, 198, 202, 189, 198, 195, 
201, 198, 202, 201, 203,
};

const int linkedtrans[102]={
101, 99, 100, 93, 94, 95, 96, 97, 98, 83, 84, 85, 86, 87, 88, 89, 
90, 91, 92, 71, 70, 72, 73, 80, 79, 78, 81, 76, 75, 74, 77, 82, 60, 
61, 62, 63, 64, 65, 66, 67, 68, 69, 54, 55, 56, 57, 58, 59, 52, 53, 
51, 50, 48, 49, 42, 43, 44, 45, 46, 47, 32, 33, 34, 35, 36, 37, 38, 
39, 40, 41, 20, 19, 21, 22, 29, 28, 27, 30, 25, 24, 23, 26, 31, 9, 
10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 4, 5, 6, 7, 8, 1, 2, 0
};

const char *trans_name_lookup[51]={
"0c",
"1c","1e",
"2c","2e","2k","2a","2i","2n",
"3c","3e","3k","3a","3i","3n","3y","3q","3j","3r",
"4c","4e","4k","4a","4i","4n","4y","4q","4j","4r","4t","4w","4z",
"5c","5e","5k","5a","5i","5n","5y","5q","5j","5r",
"6c","6e","6k","6a","6i","6n",
"7c","7e",
"8c"
};

unordered_map<char, int> trans_rev_lookup=
{
	{'c',0},
	{'e',1},
	{'k',2},
	{'a',3},
	{'i',4},
	{'n',5},
	{'y',6},
	{'q',7},
	{'j',8},
	{'r',9},
	{'t',10},
	{'w',11},
	{'z',12},
};
unordered_map<char, int> inverse_trans_rev_lookup=
{
	{'e',0},
	{'c',1},
	{'k',2},
	{'a',3},
	{'t',4},
	{'r',5},
	{'j',6},
	{'w',7},
	{'y',8},
	{'n',9},
	{'i',10},
	{'q',11},
	{'z',12},
};
const int OT_Pos[10]={0,1,3,9,19,32,42,48,50,51};

queue<pair<int,int>>& linked(int trans, int newstate)
{
	static queue<pair<int,int>> q;
	int l=linkedtrans[trans%102];
	int w=trans>101?1:0;
	int sta=0;
	if(newstate==0) sta=w+1;
	q.push({l+(1-w)*102,sta});
	return q;
}

int CellArray::get_cell_trans(int x, int y)
{
	int parity=1;
	for(int i=0;i<9;i++)
	{
		if(x==0&&i/3==0) continue;
		if(y==0&&i%3==0) continue;
		if(cells[x+i/3-1][y+i%3-1]!=0)
		{
			parity=cells[x+i/3-1][y+i%3-1];
			break;
		}
	}
    return 
    trans_lookup[(((x==0 || y==0) ? 0:cells[x-1][y-1])+\
    (y==0 ? 0:(cells[x][y-1])<<1)+\
    (y==0 ? 0:(cells[x+1][y-1])<<2)+\
    (x==0 ? 0:(cells[x-1][y])<<3)+\
    ((cells[x][y])<<4)+\
    ((cells[x+1][y])<<5)+\
    (x==0 ? 0:(cells[x-1][y+1])<<6)+\
    ((cells[x][y+1])<<7)+\
    ((cells[x+1][y+1])<<8))/parity+(parity-1)*512];
}

string reg = "[BbSs]((0|1-[ce]+|1[ce]*|2-[aceikn]+|2[aceikn]*|3-[aqrceiyjkn]+|3[aqrceiyjkn]*|4-[aceijknqrtwyz]+|4[aceijknqrtwyz]*|5-[aqrceiyjkn]+|5[aqrceiyjkn]*|6-[aceikn]+|6[aceikn]*|7-[ce]+|7[ce]*|8))*[_/]?[BbSs]((0|1-[ce]+|1[ce]*|2-[aceikn]+|2[aceikn]*|3-[aqrceiyjkn]+|3[aqrceiyjkn]*|4-[aceijknqrtwyz]+|4[aceijknqrtwyz]*|5-[aqrceiyjkn]+|5[aqrceiyjkn]*|6-[aceikn]+|6[aceikn]*|7-[ce]+|7[ce]*|8))*";

RuleRep parse_rule(string rule)
{
	if (rule.size()==0 || !regex_match(rule, regex(reg)))
	{
		cout<<"Rule: "<<rule<<" is invalid."<<endl;
		exit(1);
	}
    RuleRep arr_out={0};
	int BS=-1;
	int minusflag=0;
	char num = '#';
	for(int i=0;i<102;i++)
	{
		arr_out[i]=2;
	}
	if(rule[0]=='B')
	{
		BS=0;
	}
	else
	{
		BS=1;
	}
	for(int i=0;i<rule.size();i++)
	{
		if(rule[i]=='/')
		{
			BS=1-BS;
		}
		if(rule[i]=='S'||rule[i]=='s')
		{
			BS=1;
		}
		if(rule[i]>='0'&&rule[i]<='9')
		{
			num=rule[i];
			minusflag=0;
			if(i==rule.size()-1||(rule[i+1]>='0'&&rule[i+1]<='9')||rule[i+1]=='-'||rule[i+1]=='/'||rule[i+1]=='s'||rule[i+1]=='S')
			{
				if(rule[i+1]=='-') minusflag=1;
				for(int j=0;j<OT_Pos[rule[i]-'0'+1]-OT_Pos[rule[i]-'0'];j++)
				{
					arr_out[BS*51+OT_Pos[rule[i]-'0']+j]=0;
					arr_out[(1-BS)*51+j+OT_Pos[8-(rule[i]-'0')]+102]=1;
				}
			}
			else
			{
				for(int j=0;j<OT_Pos[rule[i]-'0'+1]-OT_Pos[rule[i]-'0'];j++)
				{
					arr_out[BS*51+OT_Pos[rule[i]-'0']+j]=2;
					arr_out[(1-BS)*51+j+OT_Pos[8-(rule[i]-'0')]+102]=0;
				}
			}
		}
		if(rule[i]>='a'&&rule[i]<='z'&&rule[i]!='s'&&rule[i]!='b')
		{
			arr_out[BS*51+OT_Pos[num-'0']+trans_rev_lookup[rule[i]]]=2*minusflag;
			if(num-'0'==4)
				arr_out[(1-BS)*51+OT_Pos[8-(num-'0')]+inverse_trans_rev_lookup[rule[i]]+102]=1-minusflag;
			else
				arr_out[(1-BS)*51+OT_Pos[8-(num-'0')]+trans_rev_lookup[rule[i]]+102]=1-minusflag;
		}
	}
    if(arr_out[0]==2)
    {
        cout<<"B0 is forced in this space."<<endl;
        exit(1);
    }
	if(arr_out[101]==0)
    {
        cout<<"S8 is not allowed in this space."<<endl;
        exit(1);
    }
	return arr_out;
}

string rulestring_from_arr(RuleRep& rule)
{
	string out="B";
	for(int i=0;i<9;i++)
	{
		//int pos_flag=0;
		vector<char> tmp1,tmp2;
		for(int j=OT_Pos[i];j<OT_Pos[i+1];j++)
		{
			if(rule[j]==0)
			{
				tmp1.push_back(trans_name_lookup[j][1]);
			}
			else
			{
				tmp2.push_back(trans_name_lookup[j][1]);
			}
		}
		if(tmp1.size()==0) 
		{
			out+="";
		}
		else if (tmp1.size()==OT_Pos[i+1]-OT_Pos[i])
		{
			out+=(i+'0');
		}
		else if (tmp1.size()<=tmp2.size())
		{
			out+=(i+'0');
			sort(tmp1.begin(),tmp1.end());
			for(char c:tmp1) out+=c;
		}
		else
		{
			out+=(i+'0');
			out+="-";
			sort(tmp2.begin(),tmp2.end());
			for(char c:tmp2) out+=c;
		}
	}
	out+="/S";
	for(int i=0;i<9;i++)
	{
		//int pos_flag=0;
		vector<char> tmp1,tmp2;
		for(int j=OT_Pos[i];j<OT_Pos[i+1];j++)
		{
			if(rule[j+51]==0)
			{
				tmp1.push_back(trans_name_lookup[j][1]);
			}
			else
			{
				tmp2.push_back(trans_name_lookup[j][1]);
			}
		}
		if(tmp1.size()==0) 
		{
			out+="";
		}
		else if (tmp1.size()==OT_Pos[i+1]-OT_Pos[i])
		{
			out+=(i+'0');
		}
		else if (tmp1.size()<=tmp2.size())
		{
			out+=(i+'0');
			sort(tmp1.begin(),tmp1.end());
			for(char c:tmp1) out+=c;
		}
		else
		{
			out+=(i+'0');
			out+="-";
			sort(tmp2.begin(),tmp2.end());
			for(char c:tmp2) out+=c;
		}
	}
	return out;
}

RulespaceRep maxspace = rulespace_from_rules(vector<RuleRep>({parse_rule("B0/S"),parse_rule("B012345678/S01234567")}));